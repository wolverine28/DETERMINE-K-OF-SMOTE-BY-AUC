itr <- itr+1
}
plotGMM2D <- function(x,y,mu,Sigma){
p <- ggplot()+
geom_point(mapping = aes(x=data[,1],y=data[,2]))+
theme_bw()
for(i in 1:K){
d <- ZdnormVEC(x = x,y = y,m = mu[[i]],S = Sigma[[i]])
p <- p+geom_contour(data = d, mapping = aes(x=Var1,y=Var2,z=d),col=i,lwd=2)
}
print(p)
}
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
plotGMM2D <- function(x,y,mu,Sigma){
p <- ggplot()+
geom_point(mapping = aes(x=data[,1],y=data[,2]))+
theme_bw()
for(i in 1:K){
d <- ZdnormVEC(x = x,y = y,m = mu[[i]],S = Sigma[[i]])
p <- p+geom_contour(data = d, mapping = aes(x=Var1,y=Var2,z=d),col=i,lwd=1.5)
}
print(p)
}
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
plotGMM2D <- function(x,y,mu,Sigma){
p <- ggplot()+
geom_point(mapping = aes(x=data[,1],y=data[,2]))+
theme_bw()
for(i in 1:K){
d <- ZdnormVEC(x = x,y = y,m = mu[[i]],S = Sigma[[i]])
p <- p+geom_contour(data = d, mapping = aes(x=Var1,y=Var2,z=d),col=i,lwd=1.2)
}
print(p)
}
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
plotGMM2D <- function(x,y,mu,Sigma){
p <- ggplot()+
geom_point(mapping = aes(x=data[,1],y=data[,2]))+
theme_bw()
for(i in 1:K){
d <- ZdnormVEC(x = x,y = y,m = mu[[i]],S = Sigma[[i]])
p <- p+geom_contour(data = d, mapping = aes(x=Var1,y=Var2,z=d),col=i,lwd=1.1)
}
print(p)
}
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
plotGMM2D <- function(x,y,mu,Sigma){
p <- ggplot()+
geom_point(mapping = aes(x=data[,1],y=data[,2]))+
theme_bw()
for(i in 1:K){
d <- ZdnormVEC(x = x,y = y,m = mu[[i]],S = Sigma[[i]])
p <- p+geom_contour(data = d, mapping = aes(x=Var1,y=Var2,z=d),col=i,lwd=1.1,bins = 3)
}
print(p)
}
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
plotGMM2D <- function(x,y,mu,Sigma){
p <- ggplot()+
geom_point(mapping = aes(x=data[,1],y=data[,2]))+
theme_bw()
for(i in 1:K){
d <- ZdnormVEC(x = x,y = y,m = mu[[i]],S = Sigma[[i]])
p <- p+geom_contour(data = d, mapping = aes(x=Var1,y=Var2,z=d),col=i,lwd=1.1,bins = 5)
}
print(p)
}
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
source('Z:/개인사용자/윤재섭/GMM_functions.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/GMM_functions.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/GMM_functions.R', echo=F)
m <- c(6,3)
S <- rbind(c(8.0,4.5),
c(4.5,8.4))
data <- mvrnorm(n = 300,mu = m,Sigma = S)
m <- c(6,14)
S <- rbind(c(4.0,4.5),
c(4.5,8.4))
data <- rbind(data,mvrnorm(n = 300,mu = m,Sigma = S))
m <- c(5,10)
S <- rbind(c(7.0,-2),
c(-4,7))
data <- rbind(data,mvrnorm(n = 300,mu = m,Sigma = S))
m <- c(10,10)
S <- rbind(c(7.0,0),
c(0,7))
data <- rbind(data,mvrnorm(n = 300,mu = m,Sigma = S))
data <- as.data.frame(data)
plot(data)
K <- 3
km <- kmeans(data,K)
plot(data,col=km$cluster)
N <- nrow(data)
mu <- list()
Sigma <- list()
for(i in 1:K){
mu[[i]] <- apply(data[km$cluster==i,],2,function(x){mean(x,na.rm = T)})
Sigma[[i]] <- var(data[km$cluster==i,],na.rm = T)
}
w <- table(km$cluster)/N
## plot ##
# plotGMM3D(x = x,y = y, mu = mu,Sigma = Sigma,w=w)
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
LH <- MLE(calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K=K))
err <- 100
itr <- 1
while(err > 0.01 && itr < 1000){
## Expectation ##
w.G <- calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K = K)
gm <- t(apply(w.G,1, function(x){x/sum(x)}))
n <- apply(gm,2,sum)
## Maximization ##
out <- calculateWeightMeanSigma(data = data,gm = gm,n = n,K = K)
w  <- out$w
mu <- out$mu
Sigma <- out$Sigma
# plotGMM3D(x = x,y = y, mu = mu,Sigma = Sigma,w=w)
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
LH.new <- MLE(calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K=K))
err <- abs(LH-LH.new)
LH <- LH.new
print(LH)
print(err)
itr <- itr+1
}
K <- 6
km <- kmeans(data,K)
plot(data,col=km$cluster)
N <- nrow(data)
mu <- list()
Sigma <- list()
for(i in 1:K){
mu[[i]] <- apply(data[km$cluster==i,],2,function(x){mean(x,na.rm = T)})
Sigma[[i]] <- var(data[km$cluster==i,],na.rm = T)
}
w <- table(km$cluster)/N
## plot ##
# plotGMM3D(x = x,y = y, mu = mu,Sigma = Sigma,w=w)
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
LH <- MLE(calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K=K))
err <- 100
itr <- 1
while(err > 0.01 && itr < 1000){
## Expectation ##
w.G <- calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K = K)
gm <- t(apply(w.G,1, function(x){x/sum(x)}))
n <- apply(gm,2,sum)
## Maximization ##
out <- calculateWeightMeanSigma(data = data,gm = gm,n = n,K = K)
w  <- out$w
mu <- out$mu
Sigma <- out$Sigma
# plotGMM3D(x = x,y = y, mu = mu,Sigma = Sigma,w=w)
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
LH.new <- MLE(calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K=K))
err <- abs(LH-LH.new)
LH <- LH.new
print(LH)
print(err)
itr <- itr+1
}
source('Z:/개인사용자/윤재섭/GMM_functions.R', echo=F)
m <- c(6,3)
S <- rbind(c(8.0,4.5),
c(4.5,8.4))
data <- mvrnorm(n = 300,mu = m,Sigma = S)
m <- c(6,14)
S <- rbind(c(4.0,4.5),
c(4.5,8.4))
data <- rbind(data,mvrnorm(n = 300,mu = m,Sigma = S))
m <- c(5,10)
S <- rbind(c(7.0,-2),
c(-4,7))
data <- rbind(data,mvrnorm(n = 300,mu = m,Sigma = S))
m <- c(10,10)
S <- rbind(c(7.0,0),
c(0,7))
data <- rbind(data,mvrnorm(n = 300,mu = m,Sigma = S))
data <- as.data.frame(data)
plot(data)
## EM-algorithm ##
## initialization ##
K <- 6
km <- kmeans(data,K)
plot(data,col=km$cluster)
N <- nrow(data)
mu <- list()
Sigma <- list()
for(i in 1:K){
mu[[i]] <- apply(data[km$cluster==i,],2,function(x){mean(x,na.rm = T)})
Sigma[[i]] <- var(data[km$cluster==i,],na.rm = T)
}
w <- table(km$cluster)/N
## plot ##
# plotGMM3D(x = x,y = y, mu = mu,Sigma = Sigma,w=w)
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
##########
LH <- MLE(calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K=K))
err <- 100
itr <- 1
while(err > 0.01 && itr < 1000){
## Expectation ##
w.G <- calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K = K)
gm <- t(apply(w.G,1, function(x){x/sum(x)}))
n <- apply(gm,2,sum)
## Maximization ##
out <- calculateWeightMeanSigma(data = data,gm = gm,n = n,K = K)
w  <- out$w
mu <- out$mu
Sigma <- out$Sigma
# plotGMM3D(x = x,y = y, mu = mu,Sigma = Sigma,w=w)
plotGMM2D(x = x,y = y, mu = mu,Sigma = Sigma)
LH.new <- MLE(calculateW.G(data = data,w = w,mu = mu,Sigma = Sigma,K=K))
err <- abs(LH-LH.new)
LH <- LH.new
print(LH)
print(err)
itr <- itr+1
}
setwd("Z:/공동작업/Imbalance classification/Experiment/code")
setwd("Z:/공동작업/Imbalance classification/Experiment/data")
data <- read.csv("4cluster.csv")
data <- read.csv("4cluster.csv")
target.column <- 3
k1 <-0.5
beta = 0.05
alpha = 10
training <-data
training[,3] <- as.numeric(training[,3])
training
max(table(training[,target.column]))
min(table(training[,target.column]))
n0 <- max(table(training[,target.column]))  #majority
n1 <- min(table(training[,target.column]))  #minority
k1 <- k1 #minority target
k0 <- 1-k1 #majority target
N <- round(k1*n0-k0*n1)
as.matrix(training[training[,target.column]==which.max(table(data[,target.column])),-target.column])
as.matrix(training[training[,target.column]==0),-target.column])
as.matrix(training[training[,target.column]==0,-target.column])
mat.train.maj <- as.matrix(training[training[,target.column]==0,-target.column])
mat.train.min <- as.matrix(training[training[,target.column]==1,-target.column])
Kr <- round(alpha*N/n1)
syn <- matrix(NA,0,ncol(data)-1)
syn
training <-data
training[,3] <- as.numeric(training[,3])
n0 <- max(table(training[,target.column]))  #majority
n1 <- min(table(training[,target.column]))  #minority
k1 <- k1 #minority target
k0 <- 1-k1 #majority target
N <- round(k1*n0-k0*n1)
mat.train.maj <- as.matrix(training[training[,target.column]==0,-target.column])
mat.train.min <- as.matrix(training[training[,target.column]==1,-target.column])
Kr <- round(alpha*N/n1)
syn <- matrix(NA,0,ncol(data)-1)
for(i in 1:n1){
syn <- rbind(syn,mvrnorm(Kr,mat.train.min[i,],beta*diag(apply(mat.train.min,2,sd))))
}
mat.train.min <- rbind(mat.train.min,
syn[order(apply(t(apply(syn,1,function(x){sqrt(rowSums((x-mat.train.maj)^2))})),1,min),decreasing = T)[1:N],])
##############################################################
pi <- apply(X = mat.train.maj,MARGIN = 2,function(x) {x/max(x)})
d <- as.matrix(dist(pi))
d[lower.tri(d,diag = T)] <-NA
d <- arrayInd(order(d)[1:N],.dim = dim(d))
elim <- c()
for(i in 1:N){
s <- sample((ncol(data)-1),1)
if(sum(d[i,])==0)
next
elim <- c(elim,d[i,s])
d[i,] <-0
d[d%in%elim]<-0
}
elim <- unique(elim)[unique(elim)!=0]
returns <- list()
mat.train.min
returns$OversampledSet  <- mat.train.min
mat.train.min
SUNDO <- function(data,target.column,k1,beta = 0.05,alpha = 10){
library("MASS")
training <-data
training[,3] <- as.numeric(training[,3])
n0 <- max(table(training[,target.column]))  #majority
n1 <- min(table(training[,target.column]))  #minority
k1 <- k1 #minority target
k0 <- 1-k1 #majority target
N <- round(k1*n0-k0*n1)
mat.train.maj <- as.matrix(training[training[,target.column]==0,-target.column])
mat.train.min <- as.matrix(training[training[,target.column]==1,-target.column])
Kr <- round(alpha*N/n1)
syn <- matrix(NA,0,ncol(data)-1)
for(i in 1:n1){
syn <- rbind(syn,mvrnorm(Kr,mat.train.min[i,],beta*diag(apply(mat.train.min,2,sd))))
}
mat.train.min <- rbind(mat.train.min,
syn[order(apply(t(apply(syn,1,function(x){sqrt(rowSums((x-mat.train.maj)^2))})),1,min),decreasing = T)[1:N],])
##############################################################
pi <- apply(X = mat.train.maj,MARGIN = 2,function(x) {x/max(x)})
d <- as.matrix(dist(pi))
d[lower.tri(d,diag = T)] <-NA
d <- arrayInd(order(d)[1:N],.dim = dim(d))
elim <- c()
for(i in 1:N){
s <- sample((ncol(data)-1),1)
if(sum(d[i,])==0)
next
elim <- c(elim,d[i,s])
d[i,] <-0
d[d%in%elim]<-0
}
elim <- unique(elim)[unique(elim)!=0]
##############################################################
returns <- list()
returns$OversampledSet  <- mat.train.min
returns$UndersampledSet <- mat.train.maj[-elim,]
returns$elim <- mat.train.maj[elim,]
print(paste(as.character(N),"object Undersampled and Oversampled"))
return(returns)
}
SUNDO(data = read.csv("4cluster.csv"),target.column = 3,k1 =  0.5,beta = 0.05, alpha = 10)
source('Z:/공동작업/Imbalance classification/Experiment/code/[07] SUNDO.R', echo=TRUE)
SUNDO(data = read.csv("4cluster.csv"),target.column = 3,k1 =  0.5,beta = 0.05, alpha = 10)
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/ClassNoise_00%")
set <- dir()
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%")
l <- dir()
l
<-1
s <-1
set
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
folds
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
testsets[[i]] <- read.csv(folds[i,1])
}
trainingsets
col <- ncol(trainingsets[[1]])
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
smote_result_CART <- array(NA,dim = c(5,30,4))
j<-1
i<-1
print(paste(setname,as.character(j),"--",as.character(i),"th folds Tasting",as.character(kn)))
kn <- sample(sum(trainingsets[[1]][,col])-1,1)
kn
print(paste(setname,as.character(j),"--",as.character(i),"th folds Tasting",as.character(kn)))
print(paste(setname,as.character(j),"--",as.character(i),"th folds Tasting"))
table(trainingsets[[i]][,col])
res <- SUNDO(data = trainingsets,target.column = col,k1 = 0.5)
col
trainingsets
SUNDO(data = trainingsets,target.column = col,k1 = 0.5)
source('Z:/공동작업/Imbalance classification/Experiment/code/[07] SUNDO.R', echo=TRUE)
SUNDO(data = trainingsets,target.column = col,k1 = 0.5)
target.column
target.column = col
data = trainingsets
training <-data
training[,target.column] <- as.numeric(training[,target.column])
training
col <- ncol(trainingsets[[1]])
ncol(trainingsets[[1]])
ncol(training)
training
source('Z:/공동작업/Imbalance classification/Experiment/code/[07] SUNDO.R', echo=TRUE)
SUNDO(data = trainingsets,target.column = col,k1 = 0.5)
data <- as.matrix(data)
data <- as.matrix(data)
data <- as.data.frame(data)
data[,target.column]
SUNDO(data = trainingsets[[i]],target.column = col,k1 = 0.5)
trainingsets[[i]]
data = trainingsets[[i]]
k1 = 0.5
data[,target.column] <- as.numeric(data[,target.column])
n0 <- max(table(data[,target.column]))  #majority
n1 <- min(table(data[,target.column]))  #minority
k1 <- k1 #minority target
k0 <- 1-k1 #majority target
N <- round(k1*n0-k0*n1)
mat.train.maj <- as.matrix(data[data[,target.column]==0,-target.column])
mat.train.min <- as.matrix(data[data[,target.column]==1,-target.column])
Kr <- round(alpha*N/n1)
syn <- matrix(NA,0,ncol(data)-1)
for(i in 1:n1){
syn <- rbind(syn,mvrnorm(Kr,mat.train.min[i,],beta*diag(apply(mat.train.min,2,sd))))
}
beta = 0.05
alpha = 10
library("MASS")
data[,target.column] <- as.numeric(data[,target.column])
n0 <- max(table(data[,target.column]))  #majority
n1 <- min(table(data[,target.column]))  #minority
k1 <- k1 #minority target
k0 <- 1-k1 #majority target
N <- round(k1*n0-k0*n1)
mat.train.maj <- as.matrix(data[data[,target.column]==0,-target.column])
mat.train.min <- as.matrix(data[data[,target.column]==1,-target.column])
Kr <- round(alpha*N/n1)
syn <- matrix(NA,0,ncol(data)-1)
for(i in 1:n1){
syn <- rbind(syn,mvrnorm(Kr,mat.train.min[i,],beta*diag(apply(mat.train.min,2,sd))))
}
mat.train.min <- rbind(mat.train.min,
syn[order(apply(t(apply(syn,1,function(x){sqrt(rowSums((x-mat.train.maj)^2))})),1,min),decreasing = T)[1:N],])
pi <- apply(X = mat.train.maj,MARGIN = 2,function(x) {x/max(x)})
d <- as.matrix(dist(pi))
d[lower.tri(d,diag = T)] <-NA
d <- arrayInd(order(d)[1:N],.dim = dim(d))
elim <- c()
for(i in 1:N){
s <- sample((ncol(data)-1),1)
if(sum(d[i,])==0)
next
elim <- c(elim,d[i,s])
d[i,] <-0
d[d%in%elim]<-0
}
elim <- c()
i<-1
s <- sample((ncol(data)-1),1)
s
sum(d[i,])==0
d[i,]
sum(d[i,])
d[i,s]
i
s
d
(ncol(data)-1)
pi <- apply(X = mat.train.maj,MARGIN = 2,function(x) {x/max(x)})
d <- as.matrix(dist(pi))
d
d[lower.tri(d,diag = T)] <-NA
d
arrayInd(order(d)[1:N],.dim = dim(d))
order(d)
1:N
order(d)[1:N]
arrayInd(order(d)[1:N],.dim = dim(d))
d <- arrayInd(order(d)[1:N],.dim = dim(d))
sample(2,1)
sample(2,1)
sample(2,1)
sample(2,1)
pi <- apply(X = mat.train.maj,MARGIN = 2,function(x) {x/max(x)})
d <- as.matrix(dist(pi))
d[lower.tri(d,diag = T)] <-NA
d <- arrayInd(order(d)[1:N],.dim = dim(d))
elim <- c()
for(i in 1:N){
s <- sample(2,1)
if(sum(d[i,])==0)
next
elim <- c(elim,d[i,s])
d[i,] <-0
d[d%in%elim]<-0
}
elim <- unique(elim)[unique(elim)!=0]
elim
source('Z:/공동작업/Imbalance classification/Experiment/code/[07] SUNDO.R', echo=TRUE)
SUNDO(data = trainingsets[[i]],target.column = col,k1 = 0.5)
SUNDO(data = trainingsets[[i]],target.column = col,k1 = 0.5)
i<-1
SUNDO(data = trainingsets[[i]],target.column = col,k1 = 0.5)
res <- SUNDO(data = trainingsets[[i]],target.column = col,k1 = 0.5)
res <- cbind(res$OversampledSet,res$UndersampledSet)
colnames(res) <- colnames(trainingsets[[i]])
res <- rind(cbind(res$OversampledSet,1),
cbind(res$UndersampledSet,0))
res <- rbind(cbind(res$OversampledSet,1),
cbind(res$UndersampledSet,0))
colnames(res) <- colnames(trainingsets[[i]])
res[,col] <- as.numeric(res[,col])
res
CART(res,testsets[[i]])
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=F)
CART(res,testsets[[i]])
res = res
testset = testsets[[i]])
testset = testsets[[i]]
CART(res = res,testset = testsets[[i]]))
CART(res = res,testset = testsets[[i]])
res
testset
res[,col] <- as.factor(res[,col])
fit <- rpart(formula(paste(colnames(res)[col],"~.")),res)
formula(paste(colnames(res)[col],"~."))
res
res[,col] <- as.factor(res[,col])
res <- as.data.frame(res)
res[,col] <- as.factor(res[,col])
fit <- rpart(formula(paste(colnames(res)[col],"~.")),res)
pred <- predict(fit,testset[,-col],type="class")
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=TRUE)
CART(res = res,testset = testsets[[i]])
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=F)
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/ClassNoise_00%")
set <- dir()
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%")
l <- dir()
source('Z:/공동작업/Imbalance classification/JS/CODE test/코드 테스트.R', echo=TRUE)
source('Z:/공동작업/Imbalance classification/Experiment/code/[07] SUNDO.R', echo=TRUE)
source('Z:/공동작업/Imbalance classification/JS/CODE test/코드 테스트.R', echo=TRUE)
res <- SUNDO(data = trainingsets[[i]],target.column = col,k1 = 0.5)
source('Z:/공동작업/Imbalance classification/JS/CODE test/코드 테스트.R', echo=TRUE)
source('Z:/공동작업/Imbalance classification/JS/CODE test/코드 테스트.R', echo=TRUE)
