testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
set
ppp<-15
setwd(paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%",sep=""))
l <- dir()
for(s in c(2,13)){
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
}
s
set
for(s in c(4,13)){
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
}
ppp<-20
no<- sprintf("%02d",ppp)
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/ClassNoise_00%")
set <- dir()
setwd(paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%",sep=""))
l <- dir()
for(s in c(4,13)){
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
}
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/ClassNoise_00%")
set <- dir()
IR  <-c()
min <- c()
for(i in 1:length(set)){
data <- read.csv(set[i])
col <- ncol(data)
ttt <- table(data[,col])
IR <-c(IR,ttt[2]/sum(ttt))
min <- c(min,sum(data[,col]))
}
mmm <- data.frame(set,IR,min)
set <- set[which(mmm[,3]<1000 & mmm[,2]<0.4)]
set <- sapply(set,function(x){strsplit(x,"_")}[[1]])[1,]
for(s in c(4,13)){
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
}
setwd(paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%",sep=""))
l <- dir()
for(s in c(4,13)){
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
}
ppp<-5
setwd(paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%",sep=""))
l <- dir()
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
ppp<-15
no<- sprintf("%02d",ppp)
setwd(paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%",sep=""))
l <- dir()
l
for(s in c(4,13)){
setname <- set[s]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
trainingsets <- list()
testsets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
}
col <- ncol(trainingsets[[1]])
print(setname)
print(c(sum(trainingsets[[1]][,col]),ncol(trainingsets[[1]])))
out <- list()
for(i in 1:nrow(folds)){
out[[i]] <- determineK(trainingsets[[i]],col)
write.csv(out[[i]],paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK/",setname,"_",as.character(i),"th_train_AUSK.csv",sep=""),row.names = F)
}
}
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%/AUSK")
kfolder <- "Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%/AUSK"
ks <- dir()
ks
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%")
l <- dir()
l
set <- paste(unique(matrix(unlist(lapply(ks,function(x){strsplit(x,".csv")[[1]]})),ncol=2,byrow=T)[,1]),".csv",sep="")
set
ks,function(x){strsplit(x,".csv")[[1]]}
lapply(ks,function(x){strsplit(x,".csv")[[1]]}))
lapply(ks,function(x){strsplit(x,".csv")[[1]]})
sapply(ks,function(x){strsplit(x,".csv")[[1]]})
sapply(ks,function(x){strsplit(x,".csv")[[1]][1]})
set <- paste(unique(matrix(unlist(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]}),ncol=2,byrow=T)[,1]),".csv",sep="")
matrix(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]}),ncol=2,byrow=T)
sapply(ks,function(x){strsplit(x,".csv")[[1]][1]})
unique(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]}))
sapply(ks,function(x){strsplit(x,".csv")})
ks <- dir()
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%/AUSK")
kfolder <- "Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%/AUSK"
ks <- dir()
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%")
l <- dir()
sapply(ks,function(x){strsplit(x,".csv")})
unique(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]}))
unique(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]}))
paste(unique(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]})),".csv",sep="")
set <- paste(unique(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]})),".csv",sep="")
s
s<-1
setname <- set[s]
setname
l[grep(setname,l)]
folds <- matrix(l[grep(setname,l)],ncol = 2,byrow = T)
folds
trainingsets <- list()
testsets <- list()
ksets <- list()
for(i in 1:nrow(folds)){
trainingsets[[i]] <- read.csv(folds[i,2])
testsets[[i]] <- read.csv(folds[i,1])
ksets[[i]] <-  read.csv(paste(kfolder,"/",ks[grep(setname,ks)][i],sep=""))
}
ksets
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/ClassNoise_00%")
set <- dir()
IR  <-c()
min <- c()
for(i in 1:length(set)){
data <- read.csv(set[i])
col <- ncol(data)
ttt <- table(data[,col])
IR <-c(IR,ttt[2]/sum(ttt))
min <- c(min,sum(data[,col]))
}
mmm <- data.frame(set,IR,min)
set <- set[which(mmm[,3]<1000 & mmm[,2]<0.4)]
set <- sapply(set,function(x){strsplit(x,"_")}[[1]])[1,]
set
length(set)
length(set)*5
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%/AUSK")
kfolder <- "Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%/AUSK"
ks <- dir()
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_00%")
l <- dir()
sapply(ks,function(x){strsplit(x,".csv")[[1]][1]})
set <- paste(unique(sapply(ks,function(x){strsplit(x,".csv")[[1]][1]})),".csv",sep="")
length(set)*5
ppp <- 0
sprintf("%02d",ppp)
no<- sprintf("%02d",ppp)
paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK")
paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK",sep="")
paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK",sep="")
paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK",sep="")
paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%/AUSK",sep="")
paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%",sep="")
paste("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/Final Data Sets/Fold sets/ClassNoise_",no,"%",sep="")
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/MY_EXP.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/MY_EXP.R', echo=TRUE)
l
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/MY_EXP.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/doBSMOTE_EXP.R', echo=TRUE)
s
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/doBSMOTE_EXP.R', echo=TRUE)
res <- rbind(trainingsets[[i]],res)
res <- doBSMOTE1(data = trainingsets[[i]],class.column = col,SMOTEK = as.numeric(t(ksets[[i]])),s=N/100)
ata = trainingsets[[i]]
ata = trainingsets[[i]]
data = trainingsets[[i]]
class.column = col
SMOTEK = as.numeric(t(ksets[[i]]))
s=N/100
library(FNN)
# class.column : column of the input data containing class labels
# m : number of nearest neighbors for obtaining DANGER objects
# k : number of nearest neighbors for reference objects
# s : number of newly generated objects for each object in DANGER
y <- data[ ,class.column]
tmp <- table(y)
n <- sum(tmp)
y.mn <- which.min(tmp)
n.mn <- tmp[y.mn]
n.mj <- n - n.mn
y.mn <- as.numeric(names(y.mn))
ind.mn <- which(y == y.mn)
ind.mj <- 1:n
ind.mj <- ind.mj[-ind.mn]
data <- data[,-class.column]
data <- as.matrix(data)
#####################################
minor <- data[ind.mn,]
m <- round(nrow(minor))
nn <- get.knnx(data = data,
query = data[ind.mn,],
k = m+1, ## 수정 JS 자기자신도 선택되고 있었음
algorithm = "kd_tree")$nn.index[,-1]
r <- apply(X = nn,
MARGIN = 1,
FUN = function(x) sum(x %in% ind.mj))
r <- r/m
ind.safe <- which(r < 0.5)
ind.noisy <- which(r == 1)
ind.danger <- ind.mn[-c(ind.safe, ind.noisy)]
ind.safe <- ind.mn[ind.safe]
ind.noisy <- ind.mn[ind.noisy]
ind.danger
temp <- length(ind.danger)
print(paste(temp, " (", (temp/n.mn)*100, "%) ",
"samples are in DANGER", sep=""))
temp <- temp * s
print(paste(temp,"synthetic samples are generated"))
dangerNN <- get.knnx(data = data[ind.mn,],
query = matrix(data[ind.danger,],ncol=ncol(data),byrow=T),
k = n.mn-1, ## 수정 JS 자기자신도 선택되고 있었음
algorithm = "kd_tree")$nn.index[,-1]
dangerNN <- matrix(dangerNN,ncol=n.mn-2,byrow=T)
make <- cbind(1:length(ind.danger),SMOTEK[ind.danger])
make
dangerNN
ind.danger
temp <- length(ind.danger)
print(paste(temp, " (", (temp/n.mn)*100, "%) ",
"samples are in DANGER", sep=""))
dangerNN <- get.knnx(data = data[ind.mn,],
query = matrix(data[ind.danger,],ncol=ncol(data),byrow=T),
k = n.mn-1, ## 수정 JS 자기자신도 선택되고 있었음
algorithm = "kd_tree")$nn.index[,-1]
dangerNN <- matrix(dangerNN,ncol=n.mn-2,byrow=T)
dangerNN
resamp <- function(x,...){if(length(x)==1) x else sample(x,...)}
newset <- matrix(NA,nrow = 0,ncol = ncol(data)+1)
for(i in 1:s){
candi <- apply(make,1,function(x){resamp(dangerNN[x[1],1:x[2]],1)})
new <- cbind(minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,]),1)
colnames(newset) <- colnames(new)
newset <- rbind(newset,new)
}
s
i
candi <- apply(make,1,function(x){resamp(dangerNN[x[1],1:x[2]],1)})
candi
minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
cbind(minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,]),1)
minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
col(data)
data
col(data)
ncol(data)
matrix(ttmmpp,ncol=ncol(data),byrow=T)
ttmmpp <- minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
matrix(ttmmpp,ncol=ncol(data),byrow=T)
ttmmpp <- minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
ttmmpp <- matrix(ttmmpp,ncol=ncol(data),byrow=T)
cbind(ttmmpp,1)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=TRUE)
s
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/doBSMOTE_EXP.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/doBSMOTE_EXP.R', echo=TRUE)
res <- doBSMOTE1(data = trainingsets[[i]],class.column = col,SMOTEK = as.numeric(t(ksets[[i]])),s=N/100)
new
ttmmpp
data = trainingsets[[i]]
class.column = col
SMOTEK = as.numeric(t(ksets[[i]]))
s=N/100
library(FNN)
# class.column : column of the input data containing class labels
# m : number of nearest neighbors for obtaining DANGER objects
# k : number of nearest neighbors for reference objects
# s : number of newly generated objects for each object in DANGER
y <- data[ ,class.column]
tmp <- table(y)
n <- sum(tmp)
y.mn <- which.min(tmp)
n.mn <- tmp[y.mn]
n.mj <- n - n.mn
y.mn <- as.numeric(names(y.mn))
ind.mn <- which(y == y.mn)
ind.mj <- 1:n
ind.mj <- ind.mj[-ind.mn]
data <- data[,-class.column]
data <- as.matrix(data)
#####################################
minor <- data[ind.mn,]
m <- round(nrow(minor))
nn <- get.knnx(data = data,
query = data[ind.mn,],
k = m+1, ## 수정 JS 자기자신도 선택되고 있었음
algorithm = "kd_tree")$nn.index[,-1]
r <- apply(X = nn,
MARGIN = 1,
FUN = function(x) sum(x %in% ind.mj))
r <- r/m
ind.safe <- which(r < 0.5)
ind.noisy <- which(r == 1)
ind.danger <- ind.mn[-c(ind.safe, ind.noisy)]
ind.safe <- ind.mn[ind.safe]
ind.noisy <- ind.mn[ind.noisy]
if(length(ind.danger)==0){
synTotal <- matrix(NA,ncol = ncol(data)+1,nrow = 0)
return(synTotal)
}
temp <- length(ind.danger)
print(paste(temp, " (", (temp/n.mn)*100, "%) ",
"samples are in DANGER", sep=""))
temp <- temp * s
print(paste(temp,"synthetic samples are generated"))
dangerNN <- get.knnx(data = data[ind.mn,],
query = matrix(data[ind.danger,],ncol=ncol(data),byrow=T),
k = n.mn-1, ## 수정 JS 자기자신도 선택되고 있었음
algorithm = "kd_tree")$nn.index[,-1]
dangerNN <- matrix(dangerNN,ncol=n.mn-2,byrow=T)
make <- cbind(1:length(ind.danger),SMOTEK[ind.danger])
make
dangerNN
resamp <- function(x,...){if(length(x)==1) x else sample(x,...)}
newset <- matrix(NA,nrow = 0,ncol = ncol(data)+1)
candi <- apply(make,1,function(x){resamp(dangerNN[x[1],1:x[2]],1)})
candi
minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
ttmmpp <- minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
matrix(ttmmpp,ncol=ncol(data),byrow=T)
minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
matrix(ttmmpp,ncol=ncol(data),byrow=F)
matrix(ttmmpp,ncol=ncol(data),byrow=T)
ttmmpp <- minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
ttmmpp
ttmmpp <- ttmmpp[1,]
matrix(ttmmpp,ncol=ncol(data),byrow=T)
matrix(ttmmpp,ncol=ncol(data),byrow=F)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/doBSMOTE_EXP.R', echo=TRUE)
ttmmpp <- minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
ttmmpp <- matrix(ttmmpp,ncol=ncol(data),byrow=F)
ttmmpp
cbind(ttmmpp,1)
new <- cbind(ttmmpp,1)
new
newset
ncol(data)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/doBSMOTE_EXP.R', echo=TRUE)
data = trainingsets[[i]]
class.column = col
SMOTEK = as.numeric(t(ksets[[i]]))
s=N/100
library(FNN)
# class.column : column of the input data containing class labels
# m : number of nearest neighbors for obtaining DANGER objects
# k : number of nearest neighbors for reference objects
# s : number of newly generated objects for each object in DANGER
y <- data[ ,class.column]
tmp <- table(y)
n <- sum(tmp)
y.mn <- which.min(tmp)
n.mn <- tmp[y.mn]
n.mj <- n - n.mn
y.mn <- as.numeric(names(y.mn))
ind.mn <- which(y == y.mn)
ind.mj <- 1:n
ind.mj <- ind.mj[-ind.mn]
data <- data[,-class.column]
data <- as.matrix(data)
#####################################
minor <- data[ind.mn,]
m <- round(nrow(minor))
nn <- get.knnx(data = data,
query = data[ind.mn,],
k = m+1, ## 수정 JS 자기자신도 선택되고 있었음
algorithm = "kd_tree")$nn.index[,-1]
r <- apply(X = nn,
MARGIN = 1,
FUN = function(x) sum(x %in% ind.mj))
r <- r/m
ind.safe <- which(r < 0.5)
ind.noisy <- which(r == 1)
ind.danger <- ind.mn[-c(ind.safe, ind.noisy)]
ind.safe <- ind.mn[ind.safe]
ind.noisy <- ind.mn[ind.noisy]
if(length(ind.danger)==0){
synTotal <- matrix(NA,ncol = ncol(data)+1,nrow = 0)
return(synTotal)
}
temp <- length(ind.danger)
print(paste(temp, " (", (temp/n.mn)*100, "%) ",
"samples are in DANGER", sep=""))
temp <- temp * s
print(paste(temp,"synthetic samples are generated"))
dangerNN <- get.knnx(data = data[ind.mn,],
query = matrix(data[ind.danger,],ncol=ncol(data),byrow=T),
k = n.mn-1, ## 수정 JS 자기자신도 선택되고 있었음
algorithm = "kd_tree")$nn.index[,-1]
dangerNN <- matrix(dangerNN,ncol=n.mn-2,byrow=T)
make <- cbind(1:length(ind.danger),SMOTEK[ind.danger])
resamp <- function(x,...){if(length(x)==1) x else sample(x,...)}
newset <- matrix(NA,nrow = 0,ncol = ncol(data)+1)
i
candi <- apply(make,1,function(x){resamp(dangerNN[x[1],1:x[2]],1)})
ttmmpp <- minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
ttmmpp <- matrix(ttmmpp,ncol=ncol(data),byrow=F)
new <- cbind(ttmmpp,1)
new
colnames(new) <- colnames(newset)
newset <- rbind(newset,new)
for(i in 1:s){
candi <- apply(make,1,function(x){resamp(dangerNN[x[1],1:x[2]],1)})
ttmmpp <- minor[ind.danger,]+runif(ncol(minor))*(minor[candi,]-minor[ind.danger,])
ttmmpp <- matrix(ttmmpp,ncol=ncol(data),byrow=F)
new <- cbind(ttmmpp,1)
colnames(new) <- colnames(newset)
newset <- rbind(newset,new)
}
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/Determinine and SMOTE.R', echo=TRUE)
res <- doBSMOTE1(data = trainingsets[[i]],class.column = col,SMOTEK = as.numeric(t(ksets[[i]])),s=N/100)
res
colnames(res)
res <- doBSMOTE1(data = trainingsets[[i]],class.column = col,SMOTEK = as.numeric(t(ksets[[i]])),s=N/100)
res
res
colnames(res)
colnames(trainingsets[[i]])
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/doBSMOTE_EXP.R', echo=TRUE)
