ForcastSupply[,1] <- as.character(as.Date(ForcastSupply[,1], origin = "1970-01-01"))
ForcastDemand[,2] <- DemandData[,2]
ForcastSupply[,2] <- SupplyData[,2]
ForcastDemand[,3] <- DemandAry[ , (p+3), 8:(DDay+7)]
ForcastSupply[,3] <- SupplyAry[ , (q+3), 8:(SDay+7)]
ForcastDemand <- ForcastDemand[(nrow(ForcastDemand)-252*7+1):nrow(ForcastDemand),]
ForcastSupply <- ForcastSupply[(nrow(ForcastSupply)-252*7+1):nrow(ForcastSupply),]
## finish
View(ForcastDemand)
ForcastDemand
load("H:/demand.RData")
SupplyData<-DemandData
DemandData
DemandData[,2]
as.factor(DemandData[,2])
city codes <- as.factor(DemandData[,2])
citycodes <- as.factor(DemandData[,2])
levels(citycodes)
DemandData[,2]==levels(citycodes)[1]
which(DemandData[,2]==levels(citycodes)[1])
DemandData[which(DemandData[,2]==levels(citycodes)[1]),]
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),])
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),c(1,3)])
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),c(1,3)],typr='l')
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),c(1,3)],type='l')
DemandAry[ , 3, 8:14]
DemandData[,3][is.na(DemandData[,3])] <- 0
SupplyData[,3][is.na(SupplyData[,3])] <- 0
DDay <- length(unique(DemandData[,1]))
SDay <- length(unique(SupplyData[,1]))
DemandAry <- array(0, dim=c(252,6,DDay+7))
SupplyAry <- array(0, dim=c(252,6,SDay+7))
DemandAry[ , 1, 1:DDay] <- DemandData[ , 1]
DemandAry[ , 2, 1:DDay] <- DemandData[ , 2]
DemandAry[ , 3, 1:DDay] <- DemandData[ , 3]
SupplyAry[ , 1, 1:SDay] <- SupplyData[ , 1]
SupplyAry[ , 2, 1:SDay] <- SupplyData[ , 2]
SupplyAry[ , 3, 1:SDay] <- SupplyData[ , 3]
MSE <- matrix(0, nrow=2, ncol=3)
# Method 1 : MA(4)
for (i in 8:DDay) {
DemandAry[ , 4, i] <- (DemandAry[ , 3, i-1] + DemandAry[ , 3, i-2] + DemandAry[ , 3, i-3] + DemandAry[ , 3, i-4]) / 4
}
for (j in (DDay+1):(DDay+7)) {
DemandAry[ , 3, j] <- (DemandAry[ , 3, j-1] + DemandAry[ , 3, j-2] + DemandAry[ , 3, j-3] + DemandAry[ , 3, j-4]) / 4
}
DemandAry[ , 4, (DDay+1):(DDay+7)] <- DemandAry[ , 3, (DDay+1):(DDay+7)]
for (i in 8:SDay) {
SupplyAry[ , 4, i] <- (SupplyAry[ , 3, i-1] + SupplyAry[ , 3, i-2] + SupplyAry[ , 3, i-3] + SupplyAry[ , 3, i-4]) / 4
}
for (j in (SDay+1):(SDay+7)) {
SupplyAry[ , 3, j] <- (SupplyAry[ , 3, j-1] + SupplyAry[ , 3, j-2] + SupplyAry[ , 3, j-3] + SupplyAry[ , 3, j-4]) / 4
}
SupplyAry[ , 4, (SDay+1):(SDay+7)] <- SupplyAry[ , 3, (SDay+1):(SDay+7)]
MSE[1,1] <- sum( (DemandAry[ , 3, 8:14] - DemandAry[ , 4, 8:14])^2 )
MSE[2,1] <- sum( (SupplyAry[ , 3, 8:14] - SupplyAry[ , 4, 8:14])^2 )
# Method 2 : WMA(4)
w1 <- 0.4
w2 <- 0.3
w3 <- 0.2
w4 <- 0.1
for (i in 8:DDay) {
DemandAry[ , 5, i] <- (w1*DemandAry[ , 3, i-1] + w2*DemandAry[ , 3, i-2] + w3*DemandAry[ , 3, i-3] + w4*DemandAry[ , 3, i-4]) / 4
}
for (j in (DDay+1):(DDay+7)) {
DemandAry[ , 3, j] <- (w1*DemandAry[ , 3, j-1] + w2*DemandAry[ , 3, j-2] + w3*DemandAry[ , 3, j-3] + w4*DemandAry[ , 3, j-4]) / 4
}
DemandAry[ , 5, (DDay+1):(DDay+7)] <- DemandAry[ , 3, (DDay+1):(DDay+7)]
for (i in 8:SDay) {
SupplyAry[ , 5, i] <- (w1*SupplyAry[ , 3, i-1] + w2*SupplyAry[ , 3, i-2] + w3*SupplyAry[ , 3, i-3] + w4*SupplyAry[ , 3, i-4]) / 4
}
for (j in (SDay+1):(SDay+7)) {
SupplyAry[ , 3, j] <- (w1*SupplyAry[ , 3, j-1] + w2*SupplyAry[ , 3, j-2] + w3*SupplyAry[ , 3, j-3] + w4*SupplyAry[ , 3, j-4]) / 4
}
SupplyAry[ , 5, (SDay+1):(SDay+7)] <- SupplyAry[ , 3, (SDay+1):(SDay+7)]
MSE[1,2] <- sum( (DemandAry[ , 3, 8:14] - DemandAry[ , 5, 8:14])^2 )
MSE[2,2] <- sum( (SupplyAry[ , 3, 8:14] - SupplyAry[ , 5, 8:14])^2 )
# Method 3 : Kernel Smoothing
DemandAry[ , 3, (DDay+1):(DDay+7)] <- 0
SupplyAry[ , 3, (SDay+1):(SDay+7)] <- 0
Ke <- function(z) {
n <- (1/sqrt(2*pi))*exp(z^2/(-2))
return (n)
}
Wi <- function(t,j) {
m <- 0
for (k in 1:7) {
m <- m + Ke((t-k)/2)
}
n <- Ke((t-j)/2)
return (n/m)
}
for (i in 8:DDay) {
for (j in 1:7) {
DemandAry[ , 6, i] <- DemandAry[ , 6, i] + Wi(i,j)*DemandAry[ , 3, (i-j)]
}
}
for (i in (DDay+1):(DDay+7)) {
for (j in 1:7) {
DemandAry[ , 3, i] <- DemandAry[ , 3, i] + Wi(i,j)*DemandAry[ , 3, (i-j)]
}
}
DemandAry[ , 6, (DDay+1):(DDay+7)] <- DemandAry[ , 3, (DDay+1):(DDay+7)]
for (i in 8:SDay) {
for (j in 1:7) {
SupplyAry[ , 6, i] <- SupplyAry[ , 6, i] + Wi(i,j)*SupplyAry[ , 3, (i-j)]
}
}
for (i in (SDay+1):(SDay+7)) {
for (j in 1:7) {
SupplyAry[ , 3, i] <- SupplyAry[ , 3, i] + Wi(i,j)*SupplyAry[ , 3, (i-j)]
}
}
SupplyAry[ , 6, (SDay+1):(SDay+7)] <- SupplyAry[ , 3, (SDay+1):(SDay+7)]
MSE[1,3] <- sum( (DemandAry[ , 3, 8:14] - DemandAry[ , 6, 8:14])^2 )
MSE[2,3] <- sum( (SupplyAry[ , 3, 8:14] - SupplyAry[ , 6, 8:14])^2 )
# min MSE
p <- which.min(MSE[1,])
q <- which.min(MSE[2,])
ForcastDemand <- matrix(0, nrow=(DDay*252), ncol=3)
ForcastSupply <- matrix(0, nrow=(SDay*252), ncol=3)
ForcastDemand[,1] <- DemandData[,1] + 7
ForcastSupply[,1] <- SupplyData[,1] + 7
ForcastDemand[,1] <- as.character(as.Date(ForcastDemand[,1], origin = "1970-01-01"))
ForcastSupply[,1] <- as.character(as.Date(ForcastSupply[,1], origin = "1970-01-01"))
ForcastDemand[,2] <- DemandData[,2]
ForcastSupply[,2] <- SupplyData[,2]
ForcastDemand[,3] <- DemandAry[ , (p+3), 8:(DDay+7)]
ForcastSupply[,3] <- SupplyAry[ , (q+3), 8:(SDay+7)]
ForcastDemand <- ForcastDemand[(nrow(ForcastDemand)-252*7+1):nrow(ForcastDemand),]
ForcastSupply <- ForcastSupply[(nrow(ForcastSupply)-252*7+1):nrow(ForcastSupply),]
## finish
DemandAry[ , 3, 8:14]
DemandAry[ , , 8:14]
DemandAry[1,,]
dim(DemandAry)
DemandAry[1,,]
dim(DemandAry)
dim(DemandData)
252*35
DemandAry[,,]
dim(DemandData)
DemandData
dim(DemandAry)
DemandAry[,,]
DemandAry[1,1,]
as.Date(DemandAry[1,1,], origin = "1970-01-01")
as.Date(DemandAry[1,1,8:14], origin = "1970-01-01")
as.Date(DemandAry[1,,8:14], origin = "1970-01-01")
DemandAry[1,,8:14]
DemandAry[1,3,8:14]
DemandData
DemandData[,1]
252*14
DemandData[1:3528,]
tail(DemandData[1:3528,])
tail(DemandData[1:3529,])
DemandData <- DemandData[1:3528,]
SupplyData <- DemandData
## starting forcasting algorithm
DemandData[,3][is.na(DemandData[,3])] <- 0
SupplyData[,3][is.na(SupplyData[,3])] <- 0
DDay <- length(unique(DemandData[,1]))
SDay <- length(unique(SupplyData[,1]))
DemandAry <- array(0, dim=c(252,6,DDay+7))
SupplyAry <- array(0, dim=c(252,6,SDay+7))
DemandAry[ , 1, 1:DDay] <- DemandData[ , 1]
DemandAry[ , 2, 1:DDay] <- DemandData[ , 2]
DemandAry[ , 3, 1:DDay] <- DemandData[ , 3]
SupplyAry[ , 1, 1:SDay] <- SupplyData[ , 1]
SupplyAry[ , 2, 1:SDay] <- SupplyData[ , 2]
SupplyAry[ , 3, 1:SDay] <- SupplyData[ , 3]
MSE <- matrix(0, nrow=2, ncol=3)
# Method 1 : MA(4)
for (i in 8:DDay) {
DemandAry[ , 4, i] <- (DemandAry[ , 3, i-1] + DemandAry[ , 3, i-2] + DemandAry[ , 3, i-3] + DemandAry[ , 3, i-4]) / 4
}
for (j in (DDay+1):(DDay+7)) {
DemandAry[ , 3, j] <- (DemandAry[ , 3, j-1] + DemandAry[ , 3, j-2] + DemandAry[ , 3, j-3] + DemandAry[ , 3, j-4]) / 4
}
DemandAry[ , 4, (DDay+1):(DDay+7)] <- DemandAry[ , 3, (DDay+1):(DDay+7)]
for (i in 8:SDay) {
SupplyAry[ , 4, i] <- (SupplyAry[ , 3, i-1] + SupplyAry[ , 3, i-2] + SupplyAry[ , 3, i-3] + SupplyAry[ , 3, i-4]) / 4
}
for (j in (SDay+1):(SDay+7)) {
SupplyAry[ , 3, j] <- (SupplyAry[ , 3, j-1] + SupplyAry[ , 3, j-2] + SupplyAry[ , 3, j-3] + SupplyAry[ , 3, j-4]) / 4
}
SupplyAry[ , 4, (SDay+1):(SDay+7)] <- SupplyAry[ , 3, (SDay+1):(SDay+7)]
MSE[1,1] <- sum( (DemandAry[ , 3, 8:14] - DemandAry[ , 4, 8:14])^2 )
MSE[2,1] <- sum( (SupplyAry[ , 3, 8:14] - SupplyAry[ , 4, 8:14])^2 )
# Method 2 : WMA(4)
w1 <- 0.4
w2 <- 0.3
w3 <- 0.2
w4 <- 0.1
for (i in 8:DDay) {
DemandAry[ , 5, i] <- (w1*DemandAry[ , 3, i-1] + w2*DemandAry[ , 3, i-2] + w3*DemandAry[ , 3, i-3] + w4*DemandAry[ , 3, i-4]) / 4
}
for (j in (DDay+1):(DDay+7)) {
DemandAry[ , 3, j] <- (w1*DemandAry[ , 3, j-1] + w2*DemandAry[ , 3, j-2] + w3*DemandAry[ , 3, j-3] + w4*DemandAry[ , 3, j-4]) / 4
}
DemandAry[ , 5, (DDay+1):(DDay+7)] <- DemandAry[ , 3, (DDay+1):(DDay+7)]
for (i in 8:SDay) {
SupplyAry[ , 5, i] <- (w1*SupplyAry[ , 3, i-1] + w2*SupplyAry[ , 3, i-2] + w3*SupplyAry[ , 3, i-3] + w4*SupplyAry[ , 3, i-4]) / 4
}
for (j in (SDay+1):(SDay+7)) {
SupplyAry[ , 3, j] <- (w1*SupplyAry[ , 3, j-1] + w2*SupplyAry[ , 3, j-2] + w3*SupplyAry[ , 3, j-3] + w4*SupplyAry[ , 3, j-4]) / 4
}
SupplyAry[ , 5, (SDay+1):(SDay+7)] <- SupplyAry[ , 3, (SDay+1):(SDay+7)]
MSE[1,2] <- sum( (DemandAry[ , 3, 8:14] - DemandAry[ , 5, 8:14])^2 )
MSE[2,2] <- sum( (SupplyAry[ , 3, 8:14] - SupplyAry[ , 5, 8:14])^2 )
# Method 3 : Kernel Smoothing
DemandAry[ , 3, (DDay+1):(DDay+7)] <- 0
SupplyAry[ , 3, (SDay+1):(SDay+7)] <- 0
Ke <- function(z) {
n <- (1/sqrt(2*pi))*exp(z^2/(-2))
return (n)
}
Wi <- function(t,j) {
m <- 0
for (k in 1:7) {
m <- m + Ke((t-k)/2)
}
n <- Ke((t-j)/2)
return (n/m)
}
for (i in 8:DDay) {
for (j in 1:7) {
DemandAry[ , 6, i] <- DemandAry[ , 6, i] + Wi(i,j)*DemandAry[ , 3, (i-j)]
}
}
for (i in (DDay+1):(DDay+7)) {
for (j in 1:7) {
DemandAry[ , 3, i] <- DemandAry[ , 3, i] + Wi(i,j)*DemandAry[ , 3, (i-j)]
}
}
DemandAry[ , 6, (DDay+1):(DDay+7)] <- DemandAry[ , 3, (DDay+1):(DDay+7)]
for (i in 8:SDay) {
for (j in 1:7) {
SupplyAry[ , 6, i] <- SupplyAry[ , 6, i] + Wi(i,j)*SupplyAry[ , 3, (i-j)]
}
}
for (i in (SDay+1):(SDay+7)) {
for (j in 1:7) {
SupplyAry[ , 3, i] <- SupplyAry[ , 3, i] + Wi(i,j)*SupplyAry[ , 3, (i-j)]
}
}
SupplyAry[ , 6, (SDay+1):(SDay+7)] <- SupplyAry[ , 3, (SDay+1):(SDay+7)]
MSE[1,3] <- sum( (DemandAry[ , 3, 8:14] - DemandAry[ , 6, 8:14])^2 )
MSE[2,3] <- sum( (SupplyAry[ , 3, 8:14] - SupplyAry[ , 6, 8:14])^2 )
# min MSE
p <- which.min(MSE[1,])
q <- which.min(MSE[2,])
ForcastDemand <- matrix(0, nrow=(DDay*252), ncol=3)
ForcastSupply <- matrix(0, nrow=(SDay*252), ncol=3)
ForcastDemand[,1] <- DemandData[,1] + 7
ForcastSupply[,1] <- SupplyData[,1] + 7
ForcastDemand[,1] <- as.character(as.Date(ForcastDemand[,1], origin = "1970-01-01"))
ForcastSupply[,1] <- as.character(as.Date(ForcastSupply[,1], origin = "1970-01-01"))
ForcastDemand[,2] <- DemandData[,2]
ForcastSupply[,2] <- SupplyData[,2]
ForcastDemand[,3] <- DemandAry[ , (p+3), 8:(DDay+7)]
ForcastSupply[,3] <- SupplyAry[ , (q+3), 8:(SDay+7)]
ForcastDemand <- ForcastDemand[(nrow(ForcastDemand)-252*7+1):nrow(ForcastDemand),]
ForcastSupply <- ForcastSupply[(nrow(ForcastSupply)-252*7+1):nrow(ForcastSupply),]
## finish
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),c(1,3)],type='l')
DemandAry[1,3,8:14]
DemandAry[1,3,]
DemandData[which(DemandData[,2]==levels(citycodes)[1]),3]
DemandAry[1,3,8:14]
DemandAry[1,3,]
DemandAry[1,3,15:21]
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),c(1,3)],type='l')
DemandData[which(DemandData[,2]==levels(citycodes)[1]),1]
DemandAry[1,1,]
as.character(as.Date(DemandAry[1,1,], origin = "1970-01-01"))
16102:(16102+21)
as.character(as.Date(16102:(16102+21), origin = "1970-01-01"))
as.character(as.Date(16102:(16102+2), origin = "1970-01-01"))
as.character(as.Date(16102:(16102+20), origin = "1970-01-01"))
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),3)],type='l')
plot(DemandData[which(DemandData[,2]==levels(citycodes)[1]),3],type='l')
date <- as.character(as.Date(16102:(16102+20), origin = "1970-01-01"))
plot(date,DemandData[which(DemandData[,2]==levels(citycodes)[1]),3],type='l')
DemandData[which(DemandData[,2]==levels(citycodes)[1]),3]
c(DemandData[which(DemandData[,2]==levels(citycodes)[1]),3],rep(0,7)
c(DemandData[which(DemandData[,2]==levels(citycodes)[1]),3],rep(0,7))
rep(0,7)
(DemandData[which(DemandData[,2]==levels(citycodes)[1]),3],rep(0,7))
c(DemandData[which(DemandData[,2]==levels(citycodes)[1]),3],rep(0,7))
original <- c(DemandData[which(DemandData[,2]==levels(citycodes)[1]),3],rep(0,7))
plot(date,original,type='l')
length(original)
length(data)
length(date)
date <- as.Date(16102:(16102+20), origin = "1970-01-01")
plot(date,original,type='l')
lines(DemandAry[1,3,8:14],col=2)
date
date[8:14]
plot(date,original,type='l')
lines(date[8:14],DemandAry[1,3,8:14],col=2)
plot(date,original,type='l')
lines(date[8:14],DemandAry[1,4,8:14],col=2)
lines(date[8:14],DemandAry[1,5,8:14],col=3)
lines(date[8:14],DemandAry[1,6,8:14],col=4)
DemandAry[1,3,15:21]
DemandAry[1,4,15:21]
DemandAry[1,3,8:14]
DemandAry[1,3,15:21]
DemandAry[1,3,]
DemandAry[1,4,]
DemandAry[1,5,]
DemandAry[1,6,]
lines(date[15:21],DemandAry[1,6,15:21],col=4)
lines(date[14:21],DemandAry[1,6,14:21],col=4)
plot(date,original,type='l')
lines(date[8:14],DemandAry[1,4,8:14],col=2)
lines(date[8:14],DemandAry[1,5,8:14],col=3)
lines(date[8:14],DemandAry[1,6,8:14],col=4)
lines(date[14:21],DemandAry[1,4,14:21],col=2)
lines(date[14:21],DemandAry[1,5,14:21],col=3)
lines(date[14:21],DemandAry[1,6,14:21],col=4)
for(code in 1: 252){
date <- as.Date(16102:(16102+20), origin = "1970-01-01")
original <- c(DemandData[which(DemandData[,2]==levels(citycodes)[code]),3],rep(0,7))
plot(date,original,type='l')
lines(date[8:14],DemandAry[code,4,8:14],col=2)
lines(date[8:14],DemandAry[code,5,8:14],col=3)
lines(date[8:14],DemandAry[code,6,8:14],col=4)
lines(date[14:21],DemandAry[code,4,14:21],col=2)
lines(date[14:21],DemandAry[code,5,14:21],col=3)
lines(date[14:21],DemandAry[code,6,14:21],col=4)
}
code <- 1
for(code in 1: 252){
date <- as.Date(16102:(16102+20), origin = "1970-01-01")
original <- c(DemandData[which(DemandData[,2]==levels(citycodes)[code]),3],rep(0,7))
plot(date,original,type='l')
lines(date[8:14],DemandAry[code,4,8:14],col=2)
lines(date[8:14],DemandAry[code,5,8:14],col=3)
lines(date[8:14],DemandAry[code,6,8:14],col=4)
lines(date[14:21],DemandAry[code,4,14:21],col=2)
lines(date[14:21],DemandAry[code,5,14:21],col=3)
lines(date[14:21],DemandAry[code,6,14:21],col=4)
title(main = as.character(levels(citycodes)[code]))
}
code <- 1
for(code in 1: 252){
date <- as.Date(16102:(16102+20), origin = "1970-01-01")
original <- c(DemandData[which(DemandData[,2]==levels(citycodes)[code]),3],rep(0,7))
plot(date,original,type='l')
lines(date[8:14],DemandAry[code,4,8:14],col=2)
lines(date[8:14],DemandAry[code,5,8:14],col=3)
lines(date[8:14],DemandAry[code,6,8:14],col=4)
# lines(date[14:21],DemandAry[code,4,14:21],col=2)
# lines(date[14:21],DemandAry[code,5,14:21],col=3)
lines(date[14:21],DemandAry[code,6,14:21],col=4)
title(main = as.character(levels(citycodes)[code]))
}
x <- runif(500,0,10)
y <- runif(500,0,10)
maj <- cbind(x,y,0)
ax <- c(runif(100,6,9),runif(70,2,4),runif(30,2,4),runif(10,7,8))
ay <- c(runif(100,6,9),runif(70,7,9),runif(30,2,4),runif(10,2,3))
min <- cbind(ax,ay,1)
data <- rbind(maj,min)
plot(data[,-3],col=data[,3]+1)
x <- runif(500,0,2)
y <- runif(500,0,2)
maj <- cbind(x,y,0)
ax <- c(runif(100,6,9),runif(70,2,4),runif(30,2,4),runif(10,7,8))
ay <- c(runif(100,6,9),runif(70,7,9),runif(30,2,4),runif(10,2,3))
min <- cbind(ax,ay,1)
data <- rbind(maj,min)
plot(data[,-3],col=data[,3]+1)
x <- runif(500,0,2)
y <- runif(500,0,10)
maj <- cbind(x,y,0)
ax <- c(runif(100,6,9),runif(70,2,4),runif(30,2,4),runif(10,7,8))
ay <- c(runif(100,6,9),runif(70,7,9),runif(30,2,4),runif(10,2,3))
min <- cbind(ax,ay,1)
data <- rbind(maj,min)
plot(data[,-3],col=data[,3]+1)
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/class_noise_5_nc/before")
l <- dir()
l
lists <- l[grep(".dat",l)]
lists
for(i in 1:length(lists)){
name <- readLines(lists[i])
dats <- name[(grep("data",name)+1):length(name)]
tmp <- t(sapply(dats,function(x){unlist(strsplit(x,","))}))
rownames(tmp) <- rep(NA,nrow(tmp))
att <- tmp[,-ncol(tmp)]
cls <- tmp[,ncol(tmp)]
class(att) <- "numeric"
cls[grep("pos",cls)] <-"positive"
cls[grep("neg",cls)] <-"negative"
cls <- as.numeric(as.factor(cls))-1
data <- cbind(att,cls)
colnames(data) <- c(paste("X",seq(1:(ncol(data)-1)),sep=""),"Y")
write.csv(data,paste("../",lists[i],".csv",sep=""),row.names = F)
}
i<-1
name <- readLines(lists[i])
dats <- name[(grep("data",name)+1):length(name)]
tmp <- t(sapply(dats,function(x){unlist(strsplit(x,","))}))
rownames(tmp) <- rep(NA,nrow(tmp))
att <- tmp[,-ncol(tmp)]
cls <- tmp[,ncol(tmp)]
class(att) <- "numeric"
cls[grep("pos",cls)] <-"positive"
cls[grep("neg",cls)] <-"negative"
cls
name <- readLines(lists[i])
dats <- name[(grep("data",name)+1):length(name)]
tmp <- t(sapply(dats,function(x){unlist(strsplit(x,","))}))
rownames(tmp) <- rep(NA,nrow(tmp))
att <- tmp[,-ncol(tmp)]
cls <- tmp[,ncol(tmp)]
cls
l <- dir()
lists <- l[grep(".dat",l)]
i<-1
name <- readLines(lists[i])
dats <- name[(grep("data",name)+1):length(name)]
tmp <- t(sapply(dats,function(x){unlist(strsplit(x,","))}))
rownames(tmp) <- rep(NA,nrow(tmp))
att <- tmp[,-ncol(tmp)]
cls <- tmp[,ncol(tmp)]
cls
name
i<-2
name <- readLines(lists[i])
print(name)
i<-3
name <- readLines(lists[i])
print(name)
i<-10
name <- readLines(lists[i])
print(name)
lists[i]
l <- dir()
lists <- l[grep(".dat",l)]
lists
i<-40
name <- readLines(lists[i])
print(name)
lists
grep("1tst",lists)
lists[grep("1tst",lists)]
lists[grep("1trn",lists)]
lists
lists[grep("1tra",lists)]
tst <- lists[grep("1tst",lists)]
tra <- lists[grep("1tra",lists)]
c(tst,tra)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/keel2csv.R', echo=TRUE)
i
name <- readLines(lists[i])
name
dats <- name[(grep("data",name)+1):length(name)]
(grep("data",name)+1)
lists[i]
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/keel2csv.R', echo=TRUE)
source('Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/experiment/keel2csv.R', echo=TRUE)
setwd("Z:/개인사용자/윤재섭/DETERMINE K OF SMOTE BY AUC/dataset/class_noise_5_nc")
dir()
dir()[grep(".csv",dir())]
l <- dir()
l
l[grep(".csv",l)]
matrix(l[grep(".csv",l)],ncol=2,byrow=T)
m <- matrix(l[grep(".csv",l)],ncol=2,byrow=T)
m
i<-
1
tra <- read.csv(m[i,1],h=T)
tst <- read.csv(m[i,1],h=T)
tra
tst
rbind(tra,tst)
data <- rbind(tra,tst)
m
name <- m[i,1]
name
strsplit(name,"-")
paste(strsplit(name,"-")[1:4],sep="")
paste(strsplit(name,"-")[1:4],sep="")
paste0(strsplit(name,"-")[1:4],sep="")
strsplit(name,"-")
strsplit(name,"-")[[1]]
paste(strsplit(name,"-")[[1]][1:4],sep="")
strsplit(name,"-")[[1]][1:4]
paste0(strsplit(name,"-")[[1]][1:4],sep="")
paste0(strsplit(name,"-")[[1]][-5],sep="")
strsplit(name,"-")[[1]][1]
write.csv(data,paste("./merged.",name,"5%cn",".csv",sep=""),row.names = F)
source('~/.active-rstudio-document', echo=TRUE)
i
l <- dir()
m <- matrix(l[grep(".csv",l)],ncol=2,byrow=T)
l <- dir()
l
m <- matrix(l[grep(".csv",l)],ncol=2,byrow=T)
l[grep(".csv",l)]
l <- dir()
m <- matrix(l[grep(".csv",l)],ncol=2,byrow=T)
m
source('~/.active-rstudio-document', echo=TRUE)
